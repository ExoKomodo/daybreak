def COMPOSE_ARGS = '--build --abort-on-container-exit'

pipeline {
  agent any

  options {
    disableConcurrentBuilds()
    ansiColor('xterm')
  }

  environment {
    DAYBREAK_BOOTSTRAP = './bootstrap/linux/daybreak'
    DAYBREAK_OUT = './out'
    CICADA_PRD_BRANCH = 'main'
    CICADA_REGISTRY_PASSWORD = credentials('docker-password')
    CICADA_REGISTRY_USERNAME = credentials('docker-username')
    CICADA_NAME = 'daybreak'

    CICADA_ROOT_DIR = ".cicada"
    CICADA_HEAD_DIR = "${CICADA_ROOT_DIR}/.head"
    CICADA_CI_DIR = "${CICADA_HEAD_DIR}/ci"
    CICADA_PIPELINES_DIR = "${CICADA_ROOT_DIR}/pipelines"
    CICADA_DOCKER_HUB_DEV_PROJECT = 'development'
    CICADA_DOCKER_HUB_PRD_PROJECT = 'daybreak'
    CICADA_DOCKER_HUB_USERNAME = 'exokomodo'
    COMPOSE = "${CICADA_CI_DIR}/compose.bash"
  }

  stages {
    stage('docker login') {
      steps {
        sh "bash ${CICADA_CI_DIR}/container_login.bash"
      }
    }

    stage('gcc') {
      environment {
        CC_COMPILER = 'gcc'
      }
      parallel {
        stage('[gcc] Build Daybreak') {
          steps {
            sh "bash ${COMPOSE} gcc-build build_daybreak"
          }
        }

        stage('[gcc] Test') {
          steps {
            sh "bash ${COMPOSE} gcc-test test"
          }
        }

        stage('[gcc] Memory Check') {
          steps {
            sh "bash ${COMPOSE} gcc-memcheck memory_check"
          }
        }
      }
    }

    stage('clang') {
      environment {
        CC_COMPILER = 'clang'
      }
      parallel {
        stage('[clang] Build Daybreak') {
          steps {
            sh "bash ${COMPOSE} clang-build build_daybreak"
          }
        }

        stage('[clang] Test') {
          steps {
            sh "bash ${COMPOSE} clang-test test"
          }
        }

        stage('[clang] Memory Check') {
          steps {
            sh "bash ${COMPOSE} clang-memcheck memory_check"
          }
        }
      }
    }

    stage('zig') {
      environment {
        CC_COMPILER = 'zig'
      }
      parallel {
        stage('[zig] Build Daybreak') {
          steps {
            sh "bash ${COMPOSE} zig-build build_daybreak"
          }
        }

        stage('[zig] Test') {
          steps {
            sh "bash ${COMPOSE} zig-test test"
          }
        }

        stage('[zig] Memory Check') {
          steps {
            sh "bash ${COMPOSE} zig-memcheck memory_check"
          }
        }
      }
    }

    stage('zig-wasi') {
      environment {
        CC_COMPILER = 'zig-wasi'
      }
      parallel {
        stage('[zig-wasi] Build Daybreak') {
          steps {
            sh "bash ${COMPOSE} zig-wasi-build build_daybreak"
          }
        }

        stage('[zig-wasi] Test') {
          steps {
            sh "bash ${COMPOSE} zig-wasi-test test"
          }
        }
      }
    }
  }

  post {
    always {
      sh "bash ${COMPOSE} fix fix_ownership"
    }
    cleanup {
      sh "bash ${CICADA_CI_DIR}/cleanup.bash"
    }
  }
}

import "std/log/prelude.day"
importc "std/compiler/system/helpers.h"
importc "string.h"

fun system_get_default_output_file() cstring do
	let standard_library_directory: cstring <- (system_get_standard_library_directory)
	mut output_file_path: cstring <-
		(malloc
			(mul
				(sizeof char)
				(add
					(strlen standard_library_directory)
					(add
						(strlen SYSTEM_OUTPUT_DIRECTORY)
						(add
							(strlen SYSTEM_DEFAULT_EXECUTABLE)
							1)))))
	(sprintf
		output_file_path
		(interpolate_cstring
			"%s"
			(interpolate_cstring
				SYSTEM_OUTPUT_DIRECTORY
				SYSTEM_DEFAULT_EXECUTABLE))
		standard_library_directory)
	(delete standard_library_directory)

	output_file_path
end

fun system_get_standard_library_directory () cstring do
	let daybreak_home_env: cstring <- (getenv "DAYBREAK_HOME")
	match
		(truthy daybreak_home_env) => do
			mut full_path: cstring <-
				(malloc
					(mul
						(sizeof char)
						(add
							(strlen daybreak_home_env)
							1)))
			(strcpy full_path daybreak_home_env)
			full_path
		end
		(default) => do
			mut full_path: cstring <-
				(malloc
					(mul
						(sizeof char)
						(add
							(add
								(strlen SYSTEM_STANDARD_PATH_PREFIX)
								(strlen SYSTEM_STANDARD_DIRECTORY))
							1)))
			(sprintf
				full_path
				"%s%s"
				SYSTEM_STANDARD_PATH_PREFIX
				SYSTEM_STANDARD_DIRECTORY)
			full_path
		end
	end
end

fun system_setup_language_directories () int do
	mut standard_library_directory: cstring <- (system_get_standard_library_directory)

	let make_dir_error: int <- (_system_make_dir standard_library_directory)
	match
		(truthy make_dir_error) => do
			(delete standard_library_directory)
			make_dir_error
		end
	end

	let make_bin_subdir_error: int <- (_system_make_subdir
		standard_library_directory
		"bin")
	match
		(truthy make_bin_subdir_error) => do
			(delete standard_library_directory)
			make_bin_subdir_error
		end
	end

	let make_packages_subdir_error: int <- (_system_make_subdir
		standard_library_directory
		"packages")
	match
		(truthy make_packages_subdir_error) => do
			(delete standard_library_directory)
			make_packages_subdir_error
		end
	end

	let make_out_subdir_error: int <- (_system_make_subdir
		standard_library_directory
		"out")
	match
		(truthy make_out_subdir_error) => do
			(delete standard_library_directory)
			make_out_subdir_error
		end
	end
	(delete standard_library_directory)

	0
end
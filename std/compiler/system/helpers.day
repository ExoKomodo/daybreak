importc "std/compiler/system/helpers.h"
importc "string.h"

fun system_get_default_output_file() cstring do
	let standard_library_directory: cstring <- (system_get_standard_library_directory)
	let output_file_path: cstring <-
		(malloc
			(mul
				(sizeof char)
				(add
					(strlen standard_library_directory)
					(add
						(strlen SYSTEM_OUTPUT_DIRECTORY)
						(add
							(strlen SYSTEM_DEFAULT_EXECUTABLE)
							1)))))
							
end

char* system_get_default_output_file() {
  char* standard_library_directory = system_get_standard_library_directory();
  char* output_file_path = malloc(sizeof(char) * (strlen(standard_library_directory) + strlen(SYSTEM_OUTPUT_DIRECTORY) + strlen(SYSTEM_DEFAULT_EXECUTABLE) + 1));
  sprintf(output_file_path, "%s" SYSTEM_OUTPUT_DIRECTORY SYSTEM_DEFAULT_EXECUTABLE, standard_library_directory);
  free(standard_library_directory);
  return output_file_path;
}

fun system_get_standard_library_directory () cstring do
	let daybreak_home_env: cstring <- (getenv "DAYBREAK_HOME")
	match
		(truthy daybreak_home_env) => do
			mut full_path: cstring <-
				(malloc
					(mul
						(sizeof char)
						(add
							(strlen daybreak_home_env)
							1)))
			(strcpy full_path daybreak_home_env)
			full_path
		end
		(default) => do
			mut full_path: cstring <-
				(malloc
					(mul
						(sizeof char)
						(add
							(add
								(strlen SYSTEM_STANDARD_PATH_PREFIX)
								(strlen SYSTEM_STANDARD_DIRECTORY))
							1)))
			(sprintf
				full_path
				"%s%s"
				SYSTEM_STANDARD_PATH_PREFIX
				SYSTEM_STANDARD_DIRECTORY)
			full_path
		end
	end
end

int system_setup_language_directories() {
  char* standard_library_directory = system_get_standard_library_directory();
  
  int error = _system_make_dir(standard_library_directory);
  if (error != 0) {
    free(standard_library_directory);
    return errno;
  }

  error = _system_make_subdir(standard_library_directory, "bin");
  if (error != 0) {
    free(standard_library_directory);
    return error;
  }

  error = _system_make_subdir(standard_library_directory, "packages");
  if (error != 0) {
    free(standard_library_directory);
    return error;
  }

  error = _system_make_subdir(standard_library_directory, "out");
  if (error != 0) {
    free(standard_library_directory);
    return error;
  }

  free(standard_library_directory);
  return 0;
}